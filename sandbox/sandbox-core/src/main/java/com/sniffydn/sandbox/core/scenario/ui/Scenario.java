package com.sniffydn.sandbox.core.scenario.ui;

import com.sniffydn.sandbox.core.scenario.CommonBody;
import com.sniffydn.sandbox.core.scenario.Doorway;
import com.sniffydn.sandbox.core.scenario.Room;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Scenario extends javax.swing.JFrame {

    private List<CommonBody> bodies;

    /**
     * Creates new form Scenario
     */
    public Scenario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        allRoomsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bodiesPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Rooms:"));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane2.setViewportView(allRoomsPanel);

        jPanel2.add(jScrollPane2);

        jSplitPane1.setTopComponent(jPanel2);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bodies:"));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane1.setViewportView(bodiesPanel);

        jPanel1.add(jScrollPane1);

        jSplitPane1.setBottomComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allRoomsPanel;
    private javax.swing.JPanel bodiesPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

    public void start(List<CommonBody> bodies) {
        Set<Room> allRooms = new HashSet<>();
        setVisible(true);
        for (CommonBody body : bodies) {
            bodiesPanel.add(new BodyRenderer(body));
            allRooms.add(body.getCurrentRoom());
            findAndAddRooms(allRooms, body.getCurrentRoom());
        }

        for (Room room : allRooms) {
            allRoomsPanel.add(new RoomRenderer(room, true));
        }
    }

    /**
     * @return the bodies
     */
    public List<CommonBody> getBodies() {
        return bodies;
    }

    /**
     * @param bodies the bodies to set
     */
    public void setBodies(List<CommonBody> bodies) {
        List<CommonBody> old = this.bodies;
        this.bodies = bodies;
        firePropertyChange("bodies", old, bodies);
    }

    private void findAndAddRooms(Set<Room> allRooms, Room currentRoom) {
        for (Doorway dw : currentRoom.getDoorways()) {
            Room possibleNewRoom = dw.getRoom1();
            if(possibleNewRoom == currentRoom) {
                possibleNewRoom = dw.getRoom2();
            }
            if (!allRooms.contains(possibleNewRoom)) {
                allRooms.add(possibleNewRoom);
                findAndAddRooms(allRooms, possibleNewRoom);
            }
        }
    }
}
