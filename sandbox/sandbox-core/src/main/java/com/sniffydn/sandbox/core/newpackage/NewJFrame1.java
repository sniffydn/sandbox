package com.sniffydn.sandbox.core.newpackage;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ImageIcon;

public class NewJFrame1 extends javax.swing.JFrame {

    public static int SIZE = 40;
    public static int MULTIPLIER = 7;
    List<Building> buildings = new ArrayList<>();
    private Set<Building> selectedBuildings = new HashSet<>();
    private Point startPoint;
    private boolean air = false;
    private boolean ground = false;
    private boolean rem = false;

    /**
     * Creates new form NewJFrame1
     */
    public NewJFrame1() {
        initComponents();
        postInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Fit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setOpaque(true);
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
        });
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });
        jPanel3.add(jLabel1);

        getContentPane().add(jPanel3, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedBuilding.name}"), jLabel2, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel2.add(jLabel2);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jButton2.setText("^");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, java.awt.BorderLayout.NORTH);

        jButton3.setText("v");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton3, java.awt.BorderLayout.SOUTH);

        jButton4.setText(">");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4, java.awt.BorderLayout.EAST);

        jButton5.setText("<");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5, java.awt.BorderLayout.WEST);

        jPanel5.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.PAGE_AXIS));

        jButton6.setText("A");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton6);

        jButton7.setText("G");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton7);

        jButton8.setText("rem");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton8);

        jButton9.setText("swap");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton9);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel5);

        getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        repaintIcon();

        System.out.println("\n\n\n");
        for (Building b : buildings) {
            System.out.println(b);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    protected void repaintIcon() {
        BufferedImage image = new BufferedImage(SIZE * MULTIPLIER, SIZE * MULTIPLIER, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = (Graphics2D) image.getGraphics();
        Set<Point> usedPoints = new HashSet();

        for (Building b : buildings) {
            boolean containsUsedPoints = true;
            while (containsUsedPoints) {
                List<Point> wantedPoints = new ArrayList<>();
                for (int i = 0; i < b.getFootprint(); i++) {
                    for (int j = 0; j < b.getFootprint(); j++) {
                        wantedPoints.add(new Point(b.getX() + i, b.getY() + j));
                    }
                }

                containsUsedPoints = false;
                for (Point p : wantedPoints) {
                    if (usedPoints.contains(p)) {
                        containsUsedPoints = true;
                        break;
                    }
                }
                if (containsUsedPoints) {
                    b.setX(b.getX() + 1);
                    if (b.getX() + b.getFootprint() > 40) {
                        b.setX(0);
                        b.setY(b.getY() + 1);
                        if (b.getY() + b.getFootprint() > 40) {
                            b.setY(0);
                        }
                    }
                    wantedPoints = new ArrayList<>();
                    for (int i = 0; i < b.getFootprint(); i++) {
                        for (int j = 0; j < b.getFootprint(); j++) {
                            wantedPoints.add(new Point(b.getX() + i, b.getY() + j));
                        }
                    }
                } else {
                    usedPoints.addAll(wantedPoints);
                }
            }
        }

        for (Building b : buildings) {
            if (b instanceof Defense) {
                Defense d = (Defense) b;
                int center = b.getFootprint() / 2;
                int centerX = center + b.getX();
                int centerY = center + b.getY();
                int x = centerX - d.getRange();
                int y = centerY - d.getRange();

                if (air && d.isAir() || ground && d.isGround()) {
                    g2d.setColor(new Color(b.getColor().getRed(), b.getColor().getGreen(), b.getColor().getBlue(), 20));
                    g2d.fillOval(x * MULTIPLIER, y * MULTIPLIER, d.getRange() * 2 * MULTIPLIER, d.getRange() * 2 * MULTIPLIER);
                }

            }
        }

        for (Building b : buildings) {
            if (b instanceof Defense) {
                Defense d = (Defense) b;
                int center = b.getFootprint() / 2;
                int centerX = center + b.getX();
                int centerY = center + b.getY();
                int x = centerX - d.getRange();
                int y = centerY - d.getRange();

                if (air && d.isAir() || ground && d.isGround()) {
                    g2d.setColor(b.getColor());
                    g2d.drawOval(x * MULTIPLIER, y * MULTIPLIER, d.getRange() * 2 * MULTIPLIER, d.getRange() * 2 * MULTIPLIER);//THIS IS THE DIFFERENCE
                }

            }
        }

        for (Building b : buildings) {
            g2d.setColor(b.getColor());
            g2d.fillRect(b.getX() * MULTIPLIER, b.getY() * MULTIPLIER, b.getFootprint() * MULTIPLIER, b.getFootprint() * MULTIPLIER);
            g2d.setColor(Color.BLACK);
            g2d.drawRect(b.getX() * MULTIPLIER, b.getY() * MULTIPLIER, b.getFootprint() * MULTIPLIER, b.getFootprint() * MULTIPLIER);
        }

        if (selectedBuildings.size() > 0) {
            for (Building b : selectedBuildings) {
                if (b instanceof Defense) {
                    Defense d = (Defense) b;
                    int center = b.getFootprint() / 2;
                    int centerX = center + b.getX();
                    int centerY = center + b.getY();
                    int x = centerX - d.getRange();
                    int y = centerY - d.getRange();
                    g2d.setColor(new Color(b.getColor().getRed(), b.getColor().getGreen(), b.getColor().getBlue(), 127));
                    g2d.fillOval(x * MULTIPLIER, y * MULTIPLIER, d.getRange() * 2 * MULTIPLIER, d.getRange() * 2 * MULTIPLIER);
                    g2d.setColor(b.getColor());
                    g2d.drawOval(x * MULTIPLIER, y * MULTIPLIER, d.getRange() * 2 * MULTIPLIER, d.getRange() * 2 * MULTIPLIER);

                }
                g2d.setColor(b.getColor());
                g2d.fillRect(b.getX() * MULTIPLIER, b.getY() * MULTIPLIER, b.getFootprint() * MULTIPLIER, b.getFootprint() * MULTIPLIER);
            }
        }

        ImageIcon icon = new ImageIcon(image);
        jLabel1.setIcon(icon);
    }

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
        startPoint = evt.getPoint();
        int x = evt.getPoint().x / MULTIPLIER;
        int y = evt.getPoint().y / MULTIPLIER;
//        System.out.println(x + " " + y);
        for (Building b : buildings) {
            if (b.getX() <= x) {
                if (b.getX() + b.getFootprint() >= x) {
                    if (b.getY() <= y) {
                        if (b.getY() + b.getFootprint() >= y) {
                            System.out.println(b);
                            if (b.getName().equals("wall") && rem) {
                                b.setX(5);
                                b.setY(5);
                            }
                            selectedBuildings.clear();
                            selectedBuildings.add(b);
                            repaintIcon();
                            return;
                        }
                    }
                }
            }
        }
        selectedBuildings.clear();
        repaintIcon();
    }//GEN-LAST:event_jLabel1MousePressed

    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged
//        System.out.println(evt);
    }//GEN-LAST:event_jLabel1MouseDragged

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased

        int startX = startPoint.x / MULTIPLIER;
        int startY = startPoint.y / MULTIPLIER;

        int x = evt.getPoint().x / MULTIPLIER;
        int y = evt.getPoint().y / MULTIPLIER;

        int diffX = startX - x;
        int diffY = startY - y;
        if (selectedBuildings.size() > 0) {

            for (Building selectedBuilding : selectedBuildings) {

                selectedBuilding.setX(selectedBuilding.getX() - diffX);
                selectedBuilding.setY(selectedBuilding.getY() - diffY);

                if (selectedBuilding.getX() + selectedBuilding.getFootprint() > 40) {
                    selectedBuilding.setX(0);
                    selectedBuilding.setY(selectedBuilding.getY() + 1);
                    if (selectedBuilding.getY() + selectedBuilding.getFootprint() > 40) {
                        selectedBuilding.setY(0);
                    }
                }
            }
            repaintIcon();
        } else {
            if (Math.abs(startX - x) > 3 || Math.abs(startY - y) > 3) {
                Rectangle rect = new Rectangle(startX, startY, Math.abs(diffX), Math.abs(diffY));
//                System.out.println(rect);
                for (Building b : buildings) {
                    Point p = new Point(b.getX(), b.getY());
//                    System.out.println("    " + p);
                    if (rect.contains(p)) {
//                        System.out.println(b);
                        selectedBuildings.add(b);
                    }
                }
                repaintIcon();
            }
        }
    }//GEN-LAST:event_jLabel1MouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (selectedBuildings.size() > 0) {
            for (Building selectedBuilding : selectedBuildings) {
                selectedBuilding.setY(selectedBuilding.getY() - 1);
            }
        }
        repaintIcon();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (selectedBuildings.size() > 0) {
            for (Building selectedBuilding : selectedBuildings) {
                selectedBuilding.setY(selectedBuilding.getY() + 1);
            }
        }
        repaintIcon();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (selectedBuildings.size() > 0) {
            for (Building selectedBuilding : selectedBuildings) {
                selectedBuilding.setX(selectedBuilding.getX() + 1);
            }
        }
        repaintIcon();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (selectedBuildings.size() > 0) {
            for (Building selectedBuilding : selectedBuildings) {
                selectedBuilding.setX(selectedBuilding.getX() - 1);
            }
        }
        repaintIcon();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        air = !air;
        repaintIcon();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ground = !ground;
        repaintIcon();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        rem = !rem;
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if (selectedBuildings.size() > 0) {
            for (Building selectedBuilding : selectedBuildings) {
                int y = selectedBuilding.getY();
                selectedBuilding.setY(selectedBuilding.getX());
                selectedBuilding.setX(y);
            }
        }
        repaintIcon();
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void postInitComponents() {
        BufferedImage image = new BufferedImage(SIZE * MULTIPLIER, SIZE * MULTIPLIER, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g2d = (Graphics2D) image.getGraphics();
        g2d.fillRect(10 * MULTIPLIER, 10 * MULTIPLIER, 10 * MULTIPLIER, 10 * MULTIPLIER);

        g2d.setColor(Color.red);
        g2d.fillRect(30 * MULTIPLIER, 30 * MULTIPLIER, 3 * MULTIPLIER, 3 * MULTIPLIER);
        g2d.fillRect(39 * MULTIPLIER, 39 * MULTIPLIER, 1 * MULTIPLIER, 1 * MULTIPLIER);

        ImageIcon icon = new ImageIcon(image);
        jLabel1.setIcon(icon);
        pack();
//        defaultPopulateBuildings();
        populateBuildings1();
    }

    private void populateBuildings1() {



buildings.add(new Building(4, "TownHall", new Color(-16777216), 20, 20));
buildings.add(new Defense(3, 14, "ClanC", false,false, new Color(-8355712), 14, 14));
buildings.add(new Defense(3, 11, "AQueen", true,true, new Color(-6946666), 27, 27));
buildings.add(new Defense(3, 14, "XBow", false,true, new Color(-6946666), 14, 21));
buildings.add(new Defense(2, 7, "LTower", true,true, new Color(-256), 20, 24));
buildings.add(new Defense(2, 7, "LTower", true,true, new Color(-256), 24, 20));
buildings.add(new Defense(2, 7, "LTower", true,true, new Color(-256), 18, 22));
buildings.add(new Defense(3, 11, "Mortar", false,true, new Color(-16711936), 29, 20));
buildings.add(new Defense(3, 11, "Mortar", false,true, new Color(-16711936), 25, 13));
buildings.add(new Defense(3, 11, "Mortar", false,true, new Color(-16711936), 13, 25));
buildings.add(new Defense(3, 10, "ATower", true,true, new Color(-14336), 28, 17));
buildings.add(new Defense(3, 10, "ATower", true,true, new Color(-14336), 17, 28));
buildings.add(new Defense(3, 7, "WTower", true,true, new Color(-16776961), 33, 23));
buildings.add(new Defense(3, 7, "WTower", true,true, new Color(-16776961), 21, 10));
buildings.add(new Defense(3, 7, "WTower", true,true, new Color(-16776961), 10, 21));
buildings.add(new Defense(3, 10, "AirD", true,false, new Color(-256), 13, 29));
buildings.add(new Defense(3, 10, "AirD", true,false, new Color(-256), 29, 13));
buildings.add(new Defense(3, 10, "AirD", true,false, new Color(-256), 18, 14));
buildings.add(new Defense(3, 14, "XBow", false,true, new Color(-6946666), 21, 14));
buildings.add(new Defense(2, 7, "LTower", true,true, new Color(-256), 22, 18));
buildings.add(new Defense(3, 11, "Mortar", false,true, new Color(-16711936), 20, 29));
buildings.add(new Defense(3, 7, "WTower", true,true, new Color(-16776961), 23, 33));
buildings.add(new Defense(3, 10, "AirD", true,false, new Color(-256), 14, 18));
buildings.add(new Defense(3, 9, "Cannon", false,true, new Color(-16711936), 17, 33));
buildings.add(new Defense(3, 9, "Cannon", false,true, new Color(-16711936), 14, 11));
buildings.add(new Defense(3, 10, "ATower", true,true, new Color(-14336), 28, 23));
buildings.add(new Defense(3, 10, "ATower", true,true, new Color(-14336), 23, 28));
buildings.add(new Defense(3, 10, "ATower", true,true, new Color(-14336), 18, 10));
buildings.add(new Defense(3, 10, "ATower", true,true, new Color(-14336), 10, 18));
buildings.add(new Defense(3, 9, "Cannon", false,true, new Color(-16711936), 11, 14));
buildings.add(new Defense(3, 9, "Cannon", false,true, new Color(-16711936), 9, 9));
buildings.add(new Defense(3, 9, "Cannon", false,true, new Color(-16711936), 33, 17));
buildings.add(new Defense(3, 9, "BKing", false,true, new Color(-6946666), 30, 30));
buildings.add(new Building(1, "wall", new Color(-12566464), 23, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 23));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 32));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 30));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 30));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 31));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 29));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 21));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 22));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 23));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 25));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 18, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 19, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 20, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 21, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 42, 0));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 13));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 37));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 22));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 32));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 34));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 37));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 28));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 33));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 34));
buildings.add(new Building(1, "wall", new Color(-12566464), 28, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 30, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 31, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 32, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 36, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 19));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 20));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 21));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 22));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 23));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 36));
buildings.add(new Building(1, "wall", new Color(-12566464), 5, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 36));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 14));
buildings.add(new Building(1, "wall", new Color(-12566464), 33, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 33));
buildings.add(new Building(1, "wall", new Color(-12566464), 28, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 19));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 31));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 18, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 29, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 12));
buildings.add(new Building(1, "wall", new Color(-12566464), 23, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 20));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 19, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 20, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 21, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 22, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 25, 38));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 19));
buildings.add(new Building(1, "wall", new Color(-12566464), 18, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 19, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 25, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 20, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 22, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 12));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 28));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 21, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 22, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 23, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 25, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 27));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 18));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 29));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 25));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 21));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 15));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 20));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 18));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 23, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 25, 1));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 6, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 28, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 1));
buildings.add(new Building(1, "wall", new Color(-12566464), 37, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 2));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 25));
buildings.add(new Building(1, "wall", new Color(-12566464), 29, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 30, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 31, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 32, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 1, 19));
buildings.add(new Building(1, "wall", new Color(-12566464), 6, 7));
buildings.add(new Building(1, "wall", new Color(-12566464), 18, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 1));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 8, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 6, 1));
buildings.add(new Building(1, "wall", new Color(-12566464), 6, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 2));
buildings.add(new Building(1, "wall", new Color(-12566464), 9, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 35));
buildings.add(new Building(1, "wall", new Color(-12566464), 10, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 11, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 12, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 22));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 19));
buildings.add(new Building(1, "wall", new Color(-12566464), 13, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 18));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 19));
buildings.add(new Building(1, "wall", new Color(-12566464), 14, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 20));
buildings.add(new Building(1, "wall", new Color(-12566464), 1, 21));
buildings.add(new Building(1, "wall", new Color(-12566464), 14, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 25, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 29, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 30, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 31, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 32, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 33, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 34, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 35, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 36, 11));
buildings.add(new Building(1, "wall", new Color(-12566464), 2, 19));
buildings.add(new Building(1, "wall", new Color(-12566464), 15, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 1, 22));
buildings.add(new Building(1, "wall", new Color(-12566464), 1, 23));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 33, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 18, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 19, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 34, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 35, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 20, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 21, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 22, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 23, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 12));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 21));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 4));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 18));
buildings.add(new Building(1, "wall", new Color(-12566464), 25, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 23));
buildings.add(new Building(1, "wall", new Color(-12566464), 8, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 22));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 23));
buildings.add(new Building(1, "wall", new Color(-12566464), 36, 26));
buildings.add(new Building(1, "wall", new Color(-12566464), 27, 4));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 34, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 35, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 37, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 28, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 29, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 26, 35));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 16));
buildings.add(new Building(1, "wall", new Color(-12566464), 30, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 31, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 32, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 33, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 1, 20));
buildings.add(new Building(1, "wall", new Color(-12566464), 34, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 35, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 36, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 23, 1));
buildings.add(new Building(1, "wall", new Color(-12566464), 37, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 39, 5));
buildings.add(new Building(1, "wall", new Color(-12566464), 0, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 21));
buildings.add(new Building(1, "wall", new Color(-12566464), 1, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 20));
buildings.add(new Building(1, "wall", new Color(-12566464), 9, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 10, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 2, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 11, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 38, 25));
buildings.add(new Building(1, "wall", new Color(-12566464), 3, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 4, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 5, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 21, 3));
buildings.add(new Building(1, "wall", new Color(-12566464), 6, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 15, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 22, 1));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 8, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 10, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 8, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 9, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 12, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 10, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 11, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 12, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 9, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 11, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 12, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 13, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 14, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 15, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 13, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 40, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 13, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 15));
buildings.add(new Building(1, "wall", new Color(-12566464), 14, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 15, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 17, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 18, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 19, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 24, 14));
buildings.add(new Building(1, "wall", new Color(-12566464), 20, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 16, 24));
buildings.add(new Building(1, "wall", new Color(-12566464), 21, 6));
buildings.add(new Building(1, "wall", new Color(-12566464), 1, 13));
buildings.add(new Building(1, "wall", new Color(-12566464), 2, 13));
buildings.add(new Building(1, "wall", new Color(-12566464), 3, 13));
buildings.add(new Building(1, "wall", new Color(-12566464), 4, 13));
buildings.add(new Building(1, "wall", new Color(-12566464), 5, 13));
buildings.add(new Building(1, "wall", new Color(-12566464), 7, 17));
buildings.add(new Building(1, "wall", new Color(-12566464), 22, 6));


//buildings.add(new Building(5, "Camp", new Color(-16711936), 1, 1));
//buildings.add(new Building(5, "Camp", new Color(-16711936), 7, 34));
//buildings.add(new Building(5, "Camp", new Color(-16711936), 1, 7));
//buildings.add(new Building(5, "Camp", new Color(-16711936), 1, 34));
//buildings.add(new Building(3, "ECollector", new Color(-65281), 17, 13));
//buildings.add(new Building(3, "ECollector", new Color(-65281), 25, 21));
//buildings.add(new Building(3, "ECollector", new Color(-65281), 17, 25));
//buildings.add(new Building(3, "ECollector", new Color(-65281), 13, 17));
//buildings.add(new Building(3, "GCollector", new Color(-3618816), 13, 13));
//buildings.add(new Building(3, "GCollector", new Color(-3618816), 25, 25));
//buildings.add(new Building(3, "GCollector", new Color(-3618816), 21, 13));
//buildings.add(new Building(3, "GCollector", new Color(-3618816), 13, 25));
//buildings.add(new Building(3, "DECollector", new Color(-1657676), 17, 17));
//buildings.add(new Building(3, "DEMine", new Color(-14136), 5, 26));
//buildings.add(new Building(3, "DEMine", new Color(-14136), 5, 30));
//buildings.add(new Building(3, "EMine", new Color(-20561), 1, 30));
//buildings.add(new Building(3, "EMine", new Color(-20561), 8, 5));
//buildings.add(new Building(3, "EMine", new Color(-20561), 8, 9));
//buildings.add(new Building(3, "EMine", new Color(-20561), 12, 1));
//buildings.add(new Building(3, "EMine", new Color(-20561), 12, 5));
//buildings.add(new Building(3, "EMine", new Color(-20561), 1, 26));
//buildings.add(new Building(3, "GMine", new Color(-256), 8, 1));
//buildings.add(new Building(3, "GMine", new Color(-256), 36, 8));
//buildings.add(new Building(3, "GMine", new Color(-256), 32, 8));
//buildings.add(new Building(3, "GMine", new Color(-256), 28, 8));
//buildings.add(new Building(3, "GMine", new Color(-256), 33, 12));
//buildings.add(new Building(3, "GMine", new Color(-256), 36, 12));
//buildings.add(new Defense(2, 0, "Pusher", true,false, new Color(-6946666), 26, 33));
//buildings.add(new Defense(2, 0, "Pusher", true,false, new Color(-6946666), 31, 29));
//buildings.add(new Building(4, "Lab", new Color(-65281), 30, 35));
//buildings.add(new Building(3, "Barracks", new Color(-16777216), 32, 1));
//buildings.add(new Building(3, "Barracks", new Color(-16777216), 36, 1));
//buildings.add(new Building(3, "Barracks", new Color(-16777216), 26, 36));
//buildings.add(new Building(3, "Barracks", new Color(-16777216), 28, 1));
//buildings.add(new Building(3, "SFactory", new Color(-16711681), 28, 4));
//buildings.add(new Building(3, "DSFactory", new Color(-16711681), 32, 4));
//buildings.add(new Building(3, "DBarracks", new Color(-10197916), 36, 4));
//buildings.add(new Building(3, "DBarracks", new Color(-10197916), 31, 32));
//buildings.add(new Building(2, "BHut", new Color(-6921216), 34, 29));
//buildings.add(new Building(2, "BHut", new Color(-6921216), 34, 32));
//buildings.add(new Building(2, "BHut", new Color(-6921216), 37, 29));
//buildings.add(new Building(2, "BHut", new Color(-6921216), 37, 32));
//buildings.add(new Building(2, "BHut", new Color(-6921216), 33, 20));


//        buildings.add(new Defense(2, 2, "GBomb", false, false, new Color(-6946666), 10, 15));
//        buildings.add(new Defense(2, 2, "GBomb", false, false, new Color(-6946666), 12, 15));
//        buildings.add(new Defense(2, 2, "GBomb", false, false, new Color(-6946666), 14, 15));
//        buildings.add(new Defense(2, 2, "GBomb", false, false, new Color(-6946666), 16, 15));
//        buildings.add(new Defense(1, 1, "bomb", false, false, new Color(-6946666), 18, 15));
//        buildings.add(new Defense(1, 1, "bomb", false, false, new Color(-6946666), 19, 15));
//        buildings.add(new Defense(1, 1, "bomb", false, false, new Color(-6946666), 20, 15));
//        buildings.add(new Defense(1, 1, "bomb", false, false, new Color(-6946666), 21, 15));
//        buildings.add(new Defense(1, 1, "bomb", false, false, new Color(-6946666), 22, 15));
//        buildings.add(new Defense(1, 1, "bomb", false, false, new Color(-6946666), 23, 15));
//        buildings.add(new Defense(1, 1, "spring", false, false, new Color(-6946666), 24, 15));
//        buildings.add(new Defense(1, 1, "spring", false, false, new Color(-6946666), 25, 15));
//        buildings.add(new Defense(1, 1, "spring", false, false, new Color(-6946666), 26, 15));
//        buildings.add(new Defense(1, 1, "spring", false, false, new Color(-6946666), 27, 15));
//        buildings.add(new Defense(1, 1, "spring", false, false, new Color(-6946666), 28, 15));
//        buildings.add(new Defense(1, 1, "spring", false, false, new Color(-6946666), 29, 15));
//        buildings.add(new Defense(1, 5, "skelTrap", false, false, new Color(-6946666), 30, 15));
//        buildings.add(new Defense(1, 5, "skelTrap", false, false, new Color(-6946666), 31, 15));
//        buildings.add(new Defense(1, 5, "MFBomb", false, false, new Color(-65536), 32, 15));
//        buildings.add(new Defense(1, 5, "MFBomb", false, false, new Color(-65536), 33, 15));
//        buildings.add(new Defense(1, 5, "MFBomb", false, false, new Color(-65536), 34, 15));
//        buildings.add(new Defense(1, 5, "MFBomb", false, false, new Color(-65536), 35, 15));
//        buildings.add(new Defense(1, 5, "SFBomb", false, false, new Color(-16777216), 36, 15));
//        buildings.add(new Defense(1, 5, "SFBomb", false, false, new Color(-16777216), 37, 15));
//        buildings.add(new Defense(1, 5, "SFBomb", false, false, new Color(-16777216), 38, 15));
//        buildings.add(new Defense(1, 5, "SFBomb", false, false, new Color(-16777216), 39, 15));
    }

    protected void defaultPopulateBuildings() {
        buildings.add(new Building(4, "TownHall", Color.BLACK, 19, 19));

        buildings.add(new Defense(3, 14, "ClanC", false, false, Color.GRAY, 23, 23));
        buildings.add(new Defense(3, 9, "BKing", false, true, new Color(150, 0, 150), 19, 23));
        buildings.add(new Defense(3, 11, "AQueen", true, true, new Color(150, 0, 150), 23, 19));

        for (int i = 0; i < 2; i++) {
            buildings.add(new Defense(3, 11, "XBow", false, true, new Color(150, 0, 150)));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Defense(2, 7, "LTower", true, true, Color.yellow));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Defense(3, 11, "Mortar", false, true, Color.green));
        }

        for (int i = 0; i < 6; i++) {
            buildings.add(new Defense(3, 10, "ATower", true, true, Color.ORANGE));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Defense(3, 7, "WTower", true, true, Color.blue));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Defense(3, 10, "AirD", true, false, Color.yellow));
        }

        for (int i = 0; i < 5; i++) {
            buildings.add(new Defense(3, 9, "Cannon", false, true, Color.white));
        }

        for (int i = 0; i < 6; i++) {
            buildings.add(new Building(3, "EMine", Color.PINK));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Building(3, "ECollector", Color.MAGENTA));
        }

        for (int i = 0; i < 6; i++) {
            buildings.add(new Building(3, "GMine", Color.YELLOW));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Building(3, "GCollector", new Color(200, 200, 0)));
        }

        for (int i = 0; i < 2; i++) {
            buildings.add(new Building(3, "DEMine", new Color(255, 200, 200)));
        }

        buildings.add(new Building(3, "DECollector", new Color(230, 180, 180)));

        buildings.add(new Building(4, "Lab", Color.MAGENTA));

        for (int i = 0; i < 4; i++) {
            buildings.add(new Building(3, "Barracks", Color.black));
        }

        for (int i = 0; i < 2; i++) {
            buildings.add(new Building(3, "DBarracks", new Color(100, 100, 100)));
        }

        for (int i = 0; i < 5; i++) {
            buildings.add(new Building(2, "BHut", new Color(150, 100, 0)));
        }

        buildings.add(new Building(3, "SFactory", Color.cyan));
        buildings.add(new Building(3, "DSFactory", Color.cyan));

        for (int i = 0; i < 48 + 177 + 25; i++) {
            buildings.add(new Building(1, "wall", Color.DARK_GRAY));
        }

        for (int i = 0; i < 2; i++) {
            buildings.add(new Defense(2, 0, "Pusher", true, false, new Color(150, 0, 150)));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Defense(2, 2, "GBomb", false, false, new Color(150, 0, 150)));
        }

        for (int i = 0; i < 6; i++) {
            buildings.add(new Defense(1, 1, "bomb", false, false, new Color(150, 0, 150)));
        }

        for (int i = 0; i < 6; i++) {
            buildings.add(new Defense(1, 1, "spring", false, false, new Color(150, 0, 150)));
        }

        for (int i = 0; i < 2; i++) {
            buildings.add(new Defense(1, 5, "skelTrap", false, false, new Color(150, 0, 150)));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Defense(1, 5, "MFBomb", false, false, Color.red));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Defense(1, 5, "SFBomb", false, false, Color.BLACK));
        }

        for (int i = 0; i < 4; i++) {
            buildings.add(new Building(5, "Camp", Color.GREEN, 0, 0));
        }
    }
}
