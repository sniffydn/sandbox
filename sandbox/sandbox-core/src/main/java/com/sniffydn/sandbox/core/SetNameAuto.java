/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sniffydn.sandbox.core;

import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;

/**
 *
 * @author dnyffeler
 */
public class SetNameAuto extends javax.swing.JFrame {

    /**
     * Creates new form SetNameAuto
     */
    public SetNameAuto() {
        initComponents();
        postInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sniffydn/sandbox/core/resources/navigator.png"))); // NOI18N
        jDialog1.getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton1.setText("Go");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane3);

        getContentPane().add(jPanel3, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Robot r = new Robot();
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            BufferedImage screen = r.createScreenCapture(new Rectangle(d.width, 0, d.width, d.height));
            setSize(300, 300);

            Point p = findRegion(screen, ImageIO.read(getClass().getResource("/sandbox/resources/navigator.png")));
            if (p != null) {
                r.mouseMove(p.x + d.width, p.y);
                r.mousePress(InputEvent.BUTTON1_MASK);
                r.mouseRelease(InputEvent.BUTTON1_MASK);
                r.delay(1000);
                screen = r.createScreenCapture(new Rectangle(d.width, 0, d.width, d.height));

                p = findRegion(screen, ImageIO.read(getClass().getResource("/sandbox/resources/plus.png")));
                jTextArea1.setText("FIND plus ");
                while (p != null) {
                    r.mouseMove(p.x + d.width, p.y);
                    r.delay(1000);
                    r.mousePress(InputEvent.BUTTON1_MASK);
                    r.mouseRelease(InputEvent.BUTTON1_MASK);
                    r.delay(2000);
                    screen = r.createScreenCapture(new Rectangle(d.width, 0, d.width, d.height));
                    p = findRegion(screen, ImageIO.read(getClass().getResource("/sandbox/resources/plus.png")));
                    jTextArea1.setText(jTextArea1.getText() + "  " + p);
                }

                p = findRegion(screen, ImageIO.read(getClass().getResource("/sandbox/resources/J.png")));
                jTextArea1.setText("FIND J ");
                while (p != null) {
                    r.mouseMove(p.x + d.width, p.y);
                    r.delay(1000);
                    r.mousePress(InputEvent.BUTTON1_MASK);
                    r.mouseRelease(InputEvent.BUTTON1_MASK);
                    r.delay(2000);
                    screen = r.createScreenCapture(new Rectangle(d.width, 0, d.width, d.height));
                    p = findRegionFrom(p.x, p.y, screen, ImageIO.read(getClass().getResource("/sandbox/resources/J.png")));
                    jTextArea1.setText(jTextArea1.getText() + "  " + p);
                }

//                Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
//                String data = (String) clpbrd.getData(DataFlavor.stringFlavor);
//                System.out.println(data);
//
//                boolean keepGoing = true;
//                while (keepGoing) {
//                    r.keyPress(KeyEvent.VK_DOWN);
//                    r.keyRelease(KeyEvent.VK_DOWN);
//                    r.delay(10);
//
//                    r.keyPress(KeyEvent.VK_F2);
//                    r.keyRelease(KeyEvent.VK_F2);
//                    r.delay(10);
//
//                    r.keyPress(KeyEvent.VK_CONTROL);
//                    r.keyPress(KeyEvent.VK_C);
//                    r.delay(10);
//                    r.keyRelease(KeyEvent.VK_C);
//                    r.keyRelease(KeyEvent.VK_CONTROL);
//
//                    keepGoing = false;
//                    boolean unsupportedFlavor = false;
//                    String newData = "";
//                    
//                    try {
//                        newData = (String) clpbrd.getData(DataFlavor.stringFlavor);
//                        System.out.println(data);
//                    } catch (UnsupportedFlavorException ex) {
//                        unsupportedFlavor = true;
//                    }
//                    
//                    if(unsupportedFlavor) {
//                        keepGoing = true;
//                    } else {
//                        if(!newData.equals(data)) {
//                            System.out.println("do something with: " + newData);
//                            
//                            
//                            keepGoing = true;
//                            data = newData;
//                        }
//                    }
//                    
//                    r.delay(5000);
//                }
//                r.keyPress(KeyEvent.VK_CONTROL);
//                r.keyPress(KeyEvent.VK_SHIFT);
//                r.keyPress(KeyEvent.VK_7);
//                r.delay(10);
//                r.keyRelease(KeyEvent.VK_7);
//                r.keyRelease(KeyEvent.VK_SHIFT);
//                r.keyRelease(KeyEvent.VK_CONTROL);
            }

        } catch (AWTException ex) {
            Logger.getLogger(SetNameAuto.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SetNameAuto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetNameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetNameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetNameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetNameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SetNameAuto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void postInitComponents() {

        try {
            Robot r = new Robot();
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            BufferedImage screen = r.createScreenCapture(new Rectangle(d.width, 0, d.width, d.height));
            jPanel1.add(new JLabel(new ImageIcon(screen)));
            setSize(300, 300);

        } catch (AWTException ex) {
            Logger.getLogger(SetNameAuto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Point findRegionFrom(int x1, int y1, BufferedImage screen, BufferedImage clickTarget) {
        for (int x = x1; x < screen.getWidth(); x++) {
            for (int y = y1 + 1; y < screen.getHeight(); y++) {
                boolean notAMatch = false;
                for (int cx = 0; cx < clickTarget.getWidth() && !notAMatch; cx++) {
                    for (int cy = 0; cy < clickTarget.getHeight() && !notAMatch; cy++) {
                        if (screen.getRGB(x + cx, y + cy) != clickTarget.getRGB(cx, cy)) {
                            notAMatch = true;
                        }
                    }
                }
                if (notAMatch) {
                    notAMatch = false;
                } else {
                    return new Point(x, y);
                }
            }
        }
        return null;
    }

    private Point findRegion(BufferedImage screen, BufferedImage clickTarget) {

        for (int x = 0; x < screen.getWidth(); x++) {
            for (int y = 0; y < screen.getHeight(); y++) {
                boolean notAMatch = false;
                for (int cx = 0; cx < clickTarget.getWidth() && !notAMatch; cx++) {
                    for (int cy = 0; cy < clickTarget.getHeight() && !notAMatch; cy++) {
                        if (screen.getRGB(x + cx, y + cy) != clickTarget.getRGB(cx, cy)) {
                            notAMatch = true;
                        }
                    }
                }
                if (notAMatch) {
                    notAMatch = false;
                } else {
                    return new Point(x, y);
                }
            }
        }
        return null;

    }

    /**
     * Converts a given Image into a BufferedImage
     *
     * @param img The Image to be converted
     * @return The converted BufferedImage
     */
    public static BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }
}
